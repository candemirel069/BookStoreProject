// <auto-generated />
using System;
using BookStore.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Data.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    partial class BookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<int?>("TranslatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TranslatorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Bilim"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Sanat"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Matematik"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Edebiyat"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Siyaset"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Ekonomi"
                        });
                });

            modelBuilder.Entity("BookStore.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityCode = 1,
                            Name = "ADANA"
                        },
                        new
                        {
                            Id = 2,
                            CityCode = 2,
                            Name = "ADIYAMAN"
                        },
                        new
                        {
                            Id = 3,
                            CityCode = 3,
                            Name = "AFYONKARAHİSAR"
                        },
                        new
                        {
                            Id = 4,
                            CityCode = 4,
                            Name = "AĞRI"
                        },
                        new
                        {
                            Id = 5,
                            CityCode = 5,
                            Name = "AMASYA"
                        },
                        new
                        {
                            Id = 6,
                            CityCode = 6,
                            Name = "ANKARA"
                        },
                        new
                        {
                            Id = 7,
                            CityCode = 7,
                            Name = "ANTALYA"
                        },
                        new
                        {
                            Id = 8,
                            CityCode = 8,
                            Name = "ARTVİN"
                        },
                        new
                        {
                            Id = 9,
                            CityCode = 9,
                            Name = "AYDIN"
                        },
                        new
                        {
                            Id = 10,
                            CityCode = 10,
                            Name = "BALIKESİR"
                        },
                        new
                        {
                            Id = 11,
                            CityCode = 11,
                            Name = "BİLECİK"
                        },
                        new
                        {
                            Id = 12,
                            CityCode = 12,
                            Name = "BİNGÖL"
                        },
                        new
                        {
                            Id = 13,
                            CityCode = 13,
                            Name = "BİTLİS"
                        },
                        new
                        {
                            Id = 14,
                            CityCode = 14,
                            Name = "BOLU"
                        },
                        new
                        {
                            Id = 15,
                            CityCode = 15,
                            Name = "BURDUR"
                        },
                        new
                        {
                            Id = 16,
                            CityCode = 16,
                            Name = "BURSA"
                        },
                        new
                        {
                            Id = 17,
                            CityCode = 17,
                            Name = "ÇANAKKALE"
                        },
                        new
                        {
                            Id = 18,
                            CityCode = 18,
                            Name = "ÇANKIRI"
                        },
                        new
                        {
                            Id = 19,
                            CityCode = 19,
                            Name = "ÇORUM"
                        },
                        new
                        {
                            Id = 20,
                            CityCode = 20,
                            Name = "DENİZLİ"
                        },
                        new
                        {
                            Id = 21,
                            CityCode = 21,
                            Name = "DİYARBAKIR"
                        },
                        new
                        {
                            Id = 22,
                            CityCode = 22,
                            Name = "EDİRNE"
                        },
                        new
                        {
                            Id = 23,
                            CityCode = 23,
                            Name = "ELAZIĞ"
                        },
                        new
                        {
                            Id = 24,
                            CityCode = 24,
                            Name = "ERZİNCAN"
                        },
                        new
                        {
                            Id = 25,
                            CityCode = 25,
                            Name = "ERZURUM"
                        },
                        new
                        {
                            Id = 26,
                            CityCode = 26,
                            Name = "ESKİŞEHİR"
                        },
                        new
                        {
                            Id = 27,
                            CityCode = 27,
                            Name = "GAZİANTEP"
                        },
                        new
                        {
                            Id = 28,
                            CityCode = 28,
                            Name = "GİRESUN"
                        },
                        new
                        {
                            Id = 29,
                            CityCode = 29,
                            Name = "GÜMÜŞHANE"
                        },
                        new
                        {
                            Id = 30,
                            CityCode = 30,
                            Name = "HAKKARİ"
                        },
                        new
                        {
                            Id = 31,
                            CityCode = 31,
                            Name = "HATAY"
                        },
                        new
                        {
                            Id = 32,
                            CityCode = 32,
                            Name = "ISPARTA"
                        },
                        new
                        {
                            Id = 33,
                            CityCode = 33,
                            Name = "MERSİN"
                        },
                        new
                        {
                            Id = 34,
                            CityCode = 34,
                            Name = "İSTANBUL"
                        },
                        new
                        {
                            Id = 35,
                            CityCode = 35,
                            Name = "İZMİR"
                        },
                        new
                        {
                            Id = 36,
                            CityCode = 36,
                            Name = "KARS"
                        },
                        new
                        {
                            Id = 37,
                            CityCode = 37,
                            Name = "KASTAMONU"
                        },
                        new
                        {
                            Id = 38,
                            CityCode = 38,
                            Name = "KAYSERİ"
                        },
                        new
                        {
                            Id = 39,
                            CityCode = 39,
                            Name = "KIRKLARELİ"
                        },
                        new
                        {
                            Id = 40,
                            CityCode = 40,
                            Name = "KIRŞEHİR"
                        },
                        new
                        {
                            Id = 41,
                            CityCode = 41,
                            Name = "KOCAELİ"
                        },
                        new
                        {
                            Id = 42,
                            CityCode = 42,
                            Name = "KONYA"
                        },
                        new
                        {
                            Id = 43,
                            CityCode = 43,
                            Name = "KÜTAHYA"
                        },
                        new
                        {
                            Id = 44,
                            CityCode = 44,
                            Name = "MALATYA"
                        },
                        new
                        {
                            Id = 45,
                            CityCode = 45,
                            Name = "MANİSA"
                        },
                        new
                        {
                            Id = 46,
                            CityCode = 46,
                            Name = "KAHRAMANMARAŞ"
                        },
                        new
                        {
                            Id = 47,
                            CityCode = 47,
                            Name = "MARDİN"
                        },
                        new
                        {
                            Id = 48,
                            CityCode = 48,
                            Name = "MUĞLA"
                        },
                        new
                        {
                            Id = 49,
                            CityCode = 49,
                            Name = "MUŞ"
                        },
                        new
                        {
                            Id = 50,
                            CityCode = 50,
                            Name = "NEVŞEHİR"
                        },
                        new
                        {
                            Id = 51,
                            CityCode = 51,
                            Name = "NİĞDE"
                        },
                        new
                        {
                            Id = 52,
                            CityCode = 52,
                            Name = "ORDU"
                        },
                        new
                        {
                            Id = 53,
                            CityCode = 53,
                            Name = "RİZE"
                        },
                        new
                        {
                            Id = 54,
                            CityCode = 54,
                            Name = "SAKARYA"
                        },
                        new
                        {
                            Id = 55,
                            CityCode = 55,
                            Name = "SAMSUN"
                        },
                        new
                        {
                            Id = 56,
                            CityCode = 56,
                            Name = "SİİRT"
                        },
                        new
                        {
                            Id = 57,
                            CityCode = 57,
                            Name = "SİNOP"
                        },
                        new
                        {
                            Id = 58,
                            CityCode = 58,
                            Name = "SİVAS"
                        },
                        new
                        {
                            Id = 59,
                            CityCode = 59,
                            Name = "TEKİRDAĞ"
                        },
                        new
                        {
                            Id = 60,
                            CityCode = 60,
                            Name = "TOKAT"
                        },
                        new
                        {
                            Id = 61,
                            CityCode = 61,
                            Name = "TRABZON"
                        },
                        new
                        {
                            Id = 62,
                            CityCode = 62,
                            Name = "TUNCELİ"
                        },
                        new
                        {
                            Id = 63,
                            CityCode = 63,
                            Name = "ŞANLIURFA"
                        },
                        new
                        {
                            Id = 64,
                            CityCode = 64,
                            Name = "UŞAK"
                        },
                        new
                        {
                            Id = 65,
                            CityCode = 65,
                            Name = "VAN"
                        },
                        new
                        {
                            Id = 66,
                            CityCode = 66,
                            Name = "YOZGAT"
                        },
                        new
                        {
                            Id = 67,
                            CityCode = 67,
                            Name = "ZONGULDAK"
                        },
                        new
                        {
                            Id = 68,
                            CityCode = 68,
                            Name = "AKSARAY"
                        },
                        new
                        {
                            Id = 69,
                            CityCode = 69,
                            Name = "BAYBURT"
                        },
                        new
                        {
                            Id = 70,
                            CityCode = 70,
                            Name = "KARAMAN"
                        },
                        new
                        {
                            Id = 71,
                            CityCode = 71,
                            Name = "KIRIKKALE"
                        },
                        new
                        {
                            Id = 72,
                            CityCode = 72,
                            Name = "BATMAN"
                        },
                        new
                        {
                            Id = 73,
                            CityCode = 73,
                            Name = "ŞIRNAK"
                        },
                        new
                        {
                            Id = 74,
                            CityCode = 74,
                            Name = "BARTIN"
                        },
                        new
                        {
                            Id = 75,
                            CityCode = 75,
                            Name = "ARDAHAN"
                        },
                        new
                        {
                            Id = 76,
                            CityCode = 76,
                            Name = "IĞDIR"
                        },
                        new
                        {
                            Id = 77,
                            CityCode = 77,
                            Name = "YALOVA"
                        },
                        new
                        {
                            Id = 78,
                            CityCode = 78,
                            Name = "KARABÜK"
                        },
                        new
                        {
                            Id = 79,
                            CityCode = 79,
                            Name = "KİLİS"
                        },
                        new
                        {
                            Id = 80,
                            CityCode = 80,
                            Name = "OSMANİYE"
                        },
                        new
                        {
                            Id = 81,
                            CityCode = 81,
                            Name = "DÜZCE"
                        });
                });

            modelBuilder.Entity("BookStore.Data.Entities.Identities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "10",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "20",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("BookStore.Data.Entities.Identities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            Name = "Türkiye İş Bankası Yayınları"
                        },
                        new
                        {
                            Id = 2,
                            Email = "",
                            Name = "Yapıkredi Bankası Yayınları"
                        },
                        new
                        {
                            Id = 3,
                            Email = "",
                            Name = "Alfa Yayınları"
                        },
                        new
                        {
                            Id = 4,
                            Email = "",
                            Name = "Oda Yayınları"
                        },
                        new
                        {
                            Id = 5,
                            Email = "",
                            Name = "İthaki Yayınları"
                        });
                });

            modelBuilder.Entity("BookStore.Data.Entities.Translator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Translators", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookStore.Data.Entities.Address", b =>
                {
                    b.HasOne("BookStore.Data.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Data.Entities.Publisher", "Publisher")
                        .WithMany("Addresses")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookStore.Data.Entities.Book", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.HasOne("BookStore.Data.Entities.Campaign", "Campaign")
                        .WithMany("Books")
                        .HasForeignKey("CampaignId");

                    b.HasOne("BookStore.Data.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Data.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Data.Entities.Translator", "Translator")
                        .WithMany("Books")
                        .HasForeignKey("TranslatorId");

                    b.Navigation("Author");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Publisher");

                    b.Navigation("Translator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BookStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Data.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Data.Entities.Campaign", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Data.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Data.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("BookStore.Data.Entities.Publisher", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.Data.Entities.Translator", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
